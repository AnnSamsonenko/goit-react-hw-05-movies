{"version":3,"file":"static/js/592.27eba685.chunk.js","mappings":"gMAEaA,E,QAAgBC,GAAAA,IAAH,kE,SCCbC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,gB,0MCRZC,EAAW,gCACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAA2BC,EAA3B,+BAAiC,GAAIC,EAArC,+BAA8C,GAA9C,SACyBC,IAAAA,IAAUF,EAAKC,GADxC,cACQE,EADR,yBAESA,EAASC,MAFlB,mEAKO,SAASC,IACd,OAAON,EAAY,GAAD,OAAIF,EAAJ,uCAA2CC,IAGxD,SAASQ,EAAaC,GAC3B,OAAOR,EAAY,GAAD,OACbF,EADa,gCACmBC,EADnB,kBACoCS,EADpC,wCAKb,SAASC,EAAeC,GAC7B,OAAOV,EAAY,GAAD,OACbF,EADa,kBACKY,EADL,oBACwBX,EADxB,oBAKb,SAASY,EAAYD,GAC1B,OAAOV,EAAY,GAAD,OACbF,EADa,kBACKY,EADL,4BACgCX,EADhC,oBAKb,SAASa,EAAaF,GAC3B,OAAOV,EAAY,GAAD,OACbF,EADa,kBACKY,EADL,4BACgCX,EADhC,uB,kKC/BPc,EAAWrB,EAAAA,GAAAA,GAAH,mIAQRsB,EAAWtB,EAAAA,GAAAA,GAAH,8IAQRuB,EAAiBvB,EAAAA,GAAAA,IAAH,gFAMdwB,EAAUxB,EAAAA,GAAAA,IAAH,+E,SCrBPyB,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,SAACL,EAAD,UACGK,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,GAAlC,OACR,UAACT,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,CAASQ,IAAKJ,EAAcK,IAAKH,OAEnC,4BACE,wBAAKA,KACL,uCAEE,kBAFF,IAEUD,UARCE,S,UCDVG,EAAO,WAClB,IAAQhB,GAAYiB,EAAAA,EAAAA,MAAZjB,QACR,GAAwBkB,EAAAA,EAAAA,UAAS,MAAjC,eAAOV,EAAP,KAAaW,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KA+BA,OA7BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,wGAEVJ,GAAW,GACXE,EAAS,IAHC,UAIatB,EAAAA,EAAAA,IAAYD,GAJzB,gBAIFQ,EAJE,EAIFA,KACFkB,EAAcC,EAAWnB,GAC/BW,EAAQO,GANE,kDAQVH,EAAS,KAAMK,SARL,yBAUVP,GAAW,GAVD,6EAAH,qDAcLM,EAAa,SAAAnB,GACjB,OAAOA,EAAKC,KAAI,SAAAoB,GAAK,MAAK,CACxBhB,GAAIgB,EAAMhB,GACVD,KAAMiB,EAAMjB,KACZD,UAAWkB,EAAMlB,UACjBD,aAAcmB,EAAMnB,aAAN,0CACyBmB,EAAMnB,cACzC,8GAIRe,MACC,CAACzB,KAGF,gCACGoB,IAAW,SAACrC,EAAA,EAAD,IACXuC,IAAS,oEACRA,IAAUF,GAAWZ,IAAQ,SAACD,EAAD,CAAUC,KAAMA","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","services/ApiMovies.jsx","components/CastInfo/CastInfo.styled.jsx","components/CastInfo/CastInfo.jsx","views/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  width: fit-content;\n  margin: 0 auto;\n`;\n","import { BallTriangle } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrapper>\n      <BallTriangle\n        heigth=\"50\"\n        width=\"50\"\n        color=\"#ff6838\"\n        ariaLabel=\"loading\"\n      />\n    </LoaderWrapper>\n  );\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c3a4cb8038ee207f234d0a08ae3fa54d';\n\nasync function fetchMovies(url = '', config = {}) {\n  const response = await axios.get(url, config);\n  return response.data;\n}\n\nexport function fetchTrending() {\n  return fetchMovies(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n}\n\nexport function fetchByQuery(query) {\n  return fetchMovies(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&language=en-US&include_adult=false`\n  );\n}\n\nexport function fetchMovieById(movieId) {\n  return fetchMovies(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchActors(movieId) {\n  return fetchMovies(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchReviews(movieId) {\n  return fetchMovies(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&`\n  );\n}\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-left: -16px;\n  margin-top: -16px;\n`;\n\nexport const CastCard = styled.li`\n  display: flex;\n  padding: 10px;\n  width: calc((100% - 16px * 3) / 3);\n  margin-left: 16px;\n  margin-top: 16px;\n`;\n\nexport const CastImgWrapper = styled.div`\n  width: 80px;\n  height: 80px;\n  margin-right: 10px;\n`;\n\nexport const CastImg = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n","import { CastList, CastCard, CastImgWrapper, CastImg } from './CastInfo.styled';\nimport propTypes from 'prop-types';\n\nexport const CastInfo = ({ cast }) => {\n  return (\n    <CastList>\n      {cast.map(({ profile_path, character, name, id }) => (\n        <CastCard key={id}>\n          <CastImgWrapper>\n            <CastImg src={profile_path} alt={name} />\n          </CastImgWrapper>\n          <div>\n            <h4>{name}</h4>\n            <p>\n              Character:\n              <br /> {character}\n            </p>\n          </div>\n        </CastCard>\n      ))}\n    </CastList>\n  );\n};\n\nCastInfo.propTypes = {\n  cast: propTypes.arrayOf(propTypes.object).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchActors } from 'services/ApiMovies';\nimport { CastInfo } from 'components/CastInfo/CastInfo';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoading(true);\n        setError('');\n        const { cast } = await fetchActors(movieId);\n        const updatedCast = formatData(cast);\n        setCast(updatedCast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const formatData = cast => {\n      return cast.map(actor => ({\n        id: actor.id,\n        name: actor.name,\n        character: actor.character,\n        profile_path: actor.profile_path\n          ? `https://image.tmdb.org/t/p/w300/${actor.profile_path}`\n          : 'https://cdn.shopify.com/s/files/1/0605/0195/0643/products/calm-black__17549_1200x1200.jpg?v=1632960018',\n      }));\n    };\n\n    fetch();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <h2>Something went wrong, please try again</h2>}\n      {!error && !loading && cast && <CastInfo cast={cast} />}\n    </>\n  );\n};\n"],"names":["LoaderWrapper","styled","Loader","heigth","width","color","ariaLabel","BASE_URL","API_KEY","fetchMovies","url","config","axios","response","data","fetchTrending","fetchByQuery","query","fetchMovieById","movieId","fetchActors","fetchReviews","CastList","CastCard","CastImgWrapper","CastImg","CastInfo","cast","map","profile_path","character","name","id","src","alt","Cast","useParams","useState","setCast","loading","setLoading","error","setError","useEffect","fetch","updatedCast","formatData","message","actor"],"sourceRoot":""}